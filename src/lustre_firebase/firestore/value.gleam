import birl
import gleam/dict.{type Dict}
import gleam/dynamic
import gleam/list

/// Should mirror https://firebase.google.com/docs/firestore/manage-data/data-types
pub type Value {
  DBArray(List(Value))
  DBBool(Bool)
  DBBytes(BitArray)
  DBDateTime(Timestamp)
  DBFloat(Float)
  DBInt(Int)
  DBMap(Dict(String, Value))
  DBString(String)
  DBGeo(latitude: Float, longitude: Float)
  DBNaN
  DBNull
  DBReference
  DBVector
  /// Custom value that is actually already a javascript object, but without having to parse and re-encode
  DBUnknown(dynamic.Dynamic)
  /// A special value that can be used with set() or update() that tells the server to remove the given elements
  /// from any array value that already exists on the server.
  /// All instances of each element specified will be removed from the array.
  /// If the field being modified is not already an array it will be overwritten with an empty array
  ArrayRemove(List(Value))
  /// A special value that can be used with set() or update() that tells the server to union the given elements with any array value that already exists on the server.
  /// Each specified element that doesn't already exist in the array will be added to the end.
  /// If the field being modified is not already an array it will be overwritten with an array containing exactly the specified elements.
  ArrayUnion(List(Value))
  /// A special value to delete a field from a map
  DeleteField
  /// A special value that can be used with set() or update() that tells the server to increment the field's current value by the given value.
  /// If either the operand or the current field value uses floating point precision, all arithmetic follows IEEE 754 semantics.
  /// If both values are integers, values outside of JavaScript's safe number range (Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER)
  /// are also subject to precision loss. Furthermore, once processed by the Firestore backend, all integer operations are capped between -2^63 and 2^63-1.
  /// If the current field value is not of type number, or if the field does not yet exist, the transformation sets the field to the given value.
  IncrementInt(Int)
  /// A special value that can be used with set() or update() that tells the server to increment the field's current value by the given value.
  /// If either the operand or the current field value uses floating point precision, all arithmetic follows IEEE 754 semantics.
  /// If both values are integers, values outside of JavaScript's safe number range (Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER)
  /// are also subject to precision loss. Furthermore, once processed by the Firestore backend, all integer operations are capped between -2^63 and 2^63-1.
  /// If the current field value is not of type number, or if the field does not yet exist, the transformation sets the field to the given value.
  IncrementFloat(Float)
  /// Different to a datetime in that it is generated by the server when writing the data
  ServerTimestamp
}

pub type Timestamp

@external(javascript, "../../firestore.ffi.mjs", "fromBirlTime")
pub fn from_birl(time: birl.Time) -> Timestamp

@external(javascript, "../../firestore.ffi.mjs", "toBirlTime")
pub fn to_birl(timestamp: Timestamp) -> birl.Time

@external(javascript, "../../firestore.ffi.mjs", "now")
pub fn now() -> Timestamp

pub fn array(items: List(a), to_value: fn(a) -> Value) {
  DBArray(list.map(items, to_value))
}

pub fn mixed_array(items: List(Value)) {
  DBArray(items)
}

pub fn bool(b: Bool) {
  DBBool(b)
}

pub fn timestamp(t: Timestamp) {
  DBDateTime(t)
}

pub fn birl_time(t: birl.Time) {
  DBDateTime(from_birl(t))
}

pub fn float(f: Float) {
  DBFloat(f)
}

pub fn int(i: Int) {
  DBInt(i)
}

pub fn object_from_list(entries: List(#(String, Value))) {
  DBMap(dict.from_list(entries))
}

pub fn object(d: Dict(String, Value)) {
  DBMap(d)
}

pub fn string(s: String) {
  DBString(s)
}

/// Use for debugging
@external(javascript, "../../firestore.ffi.mjs", "valueToString")
pub fn to_string(val: Value) -> String
